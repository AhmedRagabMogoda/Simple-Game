
Simple_Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00000e0e  00000ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800108  00800108  00000f4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e44  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ac  00000000  00000000  0000395f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00004d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ef  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001262  00000000  00000000  00005723  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006985  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  28:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_10>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  54:	09 01       	movw	r0, r18
  56:	22 01       	movw	r4, r4
  58:	3b 01       	movw	r6, r22
  5a:	54 01       	movw	r10, r8
  5c:	6c 01       	movw	r12, r24
  5e:	6c 01       	movw	r12, r24
  60:	6c 01       	movw	r12, r24
  62:	6c 01       	movw	r12, r24
  64:	6c 01       	movw	r12, r24
  66:	6c 01       	movw	r12, r24
  68:	6c 01       	movw	r12, r24
  6a:	6c 01       	movw	r12, r24
  6c:	6c 01       	movw	r12, r24
  6e:	6c 01       	movw	r12, r24
  70:	6c 01       	movw	r12, r24
  72:	6c 01       	movw	r12, r24
  74:	6c 01       	movw	r12, r24
  76:	6c 01       	movw	r12, r24
  78:	6c 01       	movw	r12, r24
  7a:	6c 01       	movw	r12, r24
  7c:	6c 01       	movw	r12, r24
  7e:	6c 01       	movw	r12, r24
  80:	6c 01       	movw	r12, r24
  82:	6c 01       	movw	r12, r24
  84:	6c 01       	movw	r12, r24
  86:	6c 01       	movw	r12, r24
  88:	6c 01       	movw	r12, r24
  8a:	6c 01       	movw	r12, r24
  8c:	6c 01       	movw	r12, r24
  8e:	6c 01       	movw	r12, r24
  90:	6c 01       	movw	r12, r24
  92:	6c 01       	movw	r12, r24
  94:	09 01       	movw	r0, r18
  96:	22 01       	movw	r4, r4
  98:	3b 01       	movw	r6, r22
  9a:	54 01       	movw	r10, r8
  9c:	79 01       	movw	r14, r18
  9e:	92 01       	movw	r18, r4
  a0:	ab 01       	movw	r20, r22
  a2:	c4 01       	movw	r24, r8
  a4:	dc 01       	movw	r26, r24
  a6:	dc 01       	movw	r26, r24
  a8:	dc 01       	movw	r26, r24
  aa:	dc 01       	movw	r26, r24
  ac:	dc 01       	movw	r26, r24
  ae:	dc 01       	movw	r26, r24
  b0:	dc 01       	movw	r26, r24
  b2:	dc 01       	movw	r26, r24
  b4:	dc 01       	movw	r26, r24
  b6:	dc 01       	movw	r26, r24
  b8:	dc 01       	movw	r26, r24
  ba:	dc 01       	movw	r26, r24
  bc:	dc 01       	movw	r26, r24
  be:	dc 01       	movw	r26, r24
  c0:	dc 01       	movw	r26, r24
  c2:	dc 01       	movw	r26, r24
  c4:	dc 01       	movw	r26, r24
  c6:	dc 01       	movw	r26, r24
  c8:	dc 01       	movw	r26, r24
  ca:	dc 01       	movw	r26, r24
  cc:	dc 01       	movw	r26, r24
  ce:	dc 01       	movw	r26, r24
  d0:	dc 01       	movw	r26, r24
  d2:	dc 01       	movw	r26, r24
  d4:	dc 01       	movw	r26, r24
  d6:	dc 01       	movw	r26, r24
  d8:	dc 01       	movw	r26, r24
  da:	dc 01       	movw	r26, r24
  dc:	79 01       	movw	r14, r18
  de:	92 01       	movw	r18, r4
  e0:	ab 01       	movw	r20, r22
  e2:	c4 01       	movw	r24, r8
  e4:	e9 01       	movw	r28, r18
  e6:	fd 01       	movw	r30, r26
  e8:	11 02       	muls	r17, r17
  ea:	25 02       	muls	r18, r21
  ec:	39 02       	muls	r19, r25
  ee:	39 02       	muls	r19, r25
  f0:	39 02       	muls	r19, r25
  f2:	39 02       	muls	r19, r25
  f4:	39 02       	muls	r19, r25
  f6:	39 02       	muls	r19, r25
  f8:	39 02       	muls	r19, r25
  fa:	39 02       	muls	r19, r25
  fc:	39 02       	muls	r19, r25
  fe:	39 02       	muls	r19, r25
 100:	39 02       	muls	r19, r25
 102:	39 02       	muls	r19, r25
 104:	39 02       	muls	r19, r25
 106:	39 02       	muls	r19, r25
 108:	39 02       	muls	r19, r25
 10a:	39 02       	muls	r19, r25
 10c:	39 02       	muls	r19, r25
 10e:	39 02       	muls	r19, r25
 110:	39 02       	muls	r19, r25
 112:	39 02       	muls	r19, r25
 114:	39 02       	muls	r19, r25
 116:	39 02       	muls	r19, r25
 118:	39 02       	muls	r19, r25
 11a:	39 02       	muls	r19, r25
 11c:	39 02       	muls	r19, r25
 11e:	39 02       	muls	r19, r25
 120:	39 02       	muls	r19, r25
 122:	39 02       	muls	r19, r25
 124:	e9 01       	movw	r28, r18
 126:	fd 01       	movw	r30, r26
 128:	11 02       	muls	r17, r17
 12a:	25 02       	muls	r18, r21
 12c:	47 02       	muls	r20, r23
 12e:	60 02       	muls	r22, r16
 130:	79 02       	muls	r23, r25
 132:	92 02       	muls	r25, r18
 134:	aa 02       	muls	r26, r26
 136:	aa 02       	muls	r26, r26
 138:	aa 02       	muls	r26, r26
 13a:	aa 02       	muls	r26, r26
 13c:	aa 02       	muls	r26, r26
 13e:	aa 02       	muls	r26, r26
 140:	aa 02       	muls	r26, r26
 142:	aa 02       	muls	r26, r26
 144:	aa 02       	muls	r26, r26
 146:	aa 02       	muls	r26, r26
 148:	aa 02       	muls	r26, r26
 14a:	aa 02       	muls	r26, r26
 14c:	aa 02       	muls	r26, r26
 14e:	aa 02       	muls	r26, r26
 150:	aa 02       	muls	r26, r26
 152:	aa 02       	muls	r26, r26
 154:	aa 02       	muls	r26, r26
 156:	aa 02       	muls	r26, r26
 158:	aa 02       	muls	r26, r26
 15a:	aa 02       	muls	r26, r26
 15c:	aa 02       	muls	r26, r26
 15e:	aa 02       	muls	r26, r26
 160:	aa 02       	muls	r26, r26
 162:	aa 02       	muls	r26, r26
 164:	aa 02       	muls	r26, r26
 166:	aa 02       	muls	r26, r26
 168:	aa 02       	muls	r26, r26
 16a:	aa 02       	muls	r26, r26
 16c:	47 02       	muls	r20, r23
 16e:	60 02       	muls	r22, r16
 170:	79 02       	muls	r23, r25
 172:	92 02       	muls	r25, r18
 174:	b8 02       	muls	r27, r24
 176:	bf 02       	muls	r27, r31
 178:	c6 02       	muls	r28, r22
 17a:	cd 02       	muls	r28, r29
 17c:	d3 02       	muls	r29, r19
 17e:	d3 02       	muls	r29, r19
 180:	d3 02       	muls	r29, r19
 182:	d3 02       	muls	r29, r19
 184:	d3 02       	muls	r29, r19
 186:	d3 02       	muls	r29, r19
 188:	d3 02       	muls	r29, r19
 18a:	d3 02       	muls	r29, r19
 18c:	d3 02       	muls	r29, r19
 18e:	d3 02       	muls	r29, r19
 190:	d3 02       	muls	r29, r19
 192:	d3 02       	muls	r29, r19
 194:	d3 02       	muls	r29, r19
 196:	d3 02       	muls	r29, r19
 198:	d3 02       	muls	r29, r19
 19a:	d3 02       	muls	r29, r19
 19c:	d3 02       	muls	r29, r19
 19e:	d3 02       	muls	r29, r19
 1a0:	d3 02       	muls	r29, r19
 1a2:	d3 02       	muls	r29, r19
 1a4:	d3 02       	muls	r29, r19
 1a6:	d3 02       	muls	r29, r19
 1a8:	d3 02       	muls	r29, r19
 1aa:	d3 02       	muls	r29, r19
 1ac:	d3 02       	muls	r29, r19
 1ae:	d3 02       	muls	r29, r19
 1b0:	d3 02       	muls	r29, r19
 1b2:	d3 02       	muls	r29, r19
 1b4:	b8 02       	muls	r27, r24
 1b6:	bf 02       	muls	r27, r31
 1b8:	c6 02       	muls	r28, r22
 1ba:	cd 02       	muls	r28, r29

000001bc <__ctors_end>:
 1bc:	11 24       	eor	r1, r1
 1be:	1f be       	out	0x3f, r1	; 63
 1c0:	cf e5       	ldi	r28, 0x5F	; 95
 1c2:	d8 e0       	ldi	r29, 0x08	; 8
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
 1c8:	11 e0       	ldi	r17, 0x01	; 1
 1ca:	a0 e6       	ldi	r26, 0x60	; 96
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	ee e0       	ldi	r30, 0x0E	; 14
 1d0:	fe e0       	ldi	r31, 0x0E	; 14
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
 1d4:	05 90       	lpm	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	a8 30       	cpi	r26, 0x08	; 8
 1da:	b1 07       	cpc	r27, r17
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	a8 e0       	ldi	r26, 0x08	; 8
 1e2:	b1 e0       	ldi	r27, 0x01	; 1
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
 1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
 1e8:	ac 30       	cpi	r26, 0x0C	; 12
 1ea:	b2 07       	cpc	r27, r18
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
 1ee:	0e 94 59 04 	call	0x8b2	; 0x8b2 <main>
 1f2:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_exit>

000001f6 <__bad_interrupt>:
 1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <DIO_set_pin_dir>:
		PORTC|=value;
		break;
		case 'D':
		case 'd':
		PORTD&=0xf0;
		PORTD|=value;
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	e1 54       	subi	r30, 0x41	; 65
 200:	f1 09       	sbc	r31, r1
 202:	e4 32       	cpi	r30, 0x24	; 36
 204:	f1 05       	cpc	r31, r1
 206:	08 f0       	brcs	.+2      	; 0x20a <DIO_set_pin_dir+0x10>
 208:	67 c0       	rjmp	.+206    	; 0x2d8 <DIO_set_pin_dir+0xde>
 20a:	e6 5d       	subi	r30, 0xD6	; 214
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__tablejump2__>
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_set_pin_dir+0x32>
 216:	2a b3       	in	r18, 0x1a	; 26
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_set_pin_dir+0x28>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_set_pin_dir+0x24>
 226:	82 2b       	or	r24, r18
 228:	8a bb       	out	0x1a, r24	; 26
 22a:	08 95       	ret
 22c:	2a b3       	in	r18, 0x1a	; 26
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_set_pin_dir+0x3e>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_set_pin_dir+0x3a>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	8a bb       	out	0x1a, r24	; 26
 242:	08 95       	ret
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	59 f4       	brne	.+22     	; 0x25e <DIO_set_pin_dir+0x64>
 248:	27 b3       	in	r18, 0x17	; 23
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_set_pin_dir+0x5a>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_set_pin_dir+0x56>
 258:	82 2b       	or	r24, r18
 25a:	87 bb       	out	0x17, r24	; 23
 25c:	08 95       	ret
 25e:	27 b3       	in	r18, 0x17	; 23
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_set_pin_dir+0x70>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_set_pin_dir+0x6c>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	87 bb       	out	0x17, r24	; 23
 274:	08 95       	ret
 276:	41 30       	cpi	r20, 0x01	; 1
 278:	59 f4       	brne	.+22     	; 0x290 <DIO_set_pin_dir+0x96>
 27a:	24 b3       	in	r18, 0x14	; 20
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_set_pin_dir+0x8c>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_set_pin_dir+0x88>
 28a:	82 2b       	or	r24, r18
 28c:	84 bb       	out	0x14, r24	; 20
 28e:	08 95       	ret
 290:	24 b3       	in	r18, 0x14	; 20
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_set_pin_dir+0xa2>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_set_pin_dir+0x9e>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	84 bb       	out	0x14, r24	; 20
 2a6:	08 95       	ret
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	59 f4       	brne	.+22     	; 0x2c2 <DIO_set_pin_dir+0xc8>
 2ac:	21 b3       	in	r18, 0x11	; 17
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_set_pin_dir+0xbe>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_set_pin_dir+0xba>
 2bc:	82 2b       	or	r24, r18
 2be:	81 bb       	out	0x11, r24	; 17
 2c0:	08 95       	ret
 2c2:	21 b3       	in	r18, 0x11	; 17
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_set_pin_dir+0xd4>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_set_pin_dir+0xd0>
 2d2:	80 95       	com	r24
 2d4:	82 23       	and	r24, r18
 2d6:	81 bb       	out	0x11, r24	; 17
 2d8:	08 95       	ret

000002da <DIO_write_pin>:
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	e1 54       	subi	r30, 0x41	; 65
 2e0:	f1 09       	sbc	r31, r1
 2e2:	e4 32       	cpi	r30, 0x24	; 36
 2e4:	f1 05       	cpc	r31, r1
 2e6:	08 f0       	brcs	.+2      	; 0x2ea <DIO_write_pin+0x10>
 2e8:	67 c0       	rjmp	.+206    	; 0x3b8 <DIO_write_pin+0xde>
 2ea:	e2 5b       	subi	r30, 0xB2	; 178
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__tablejump2__>
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	59 f4       	brne	.+22     	; 0x30c <DIO_write_pin+0x32>
 2f6:	2b b3       	in	r18, 0x1b	; 27
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_write_pin+0x28>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_write_pin+0x24>
 306:	82 2b       	or	r24, r18
 308:	8b bb       	out	0x1b, r24	; 27
 30a:	08 95       	ret
 30c:	2b b3       	in	r18, 0x1b	; 27
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_write_pin+0x3e>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_write_pin+0x3a>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	8b bb       	out	0x1b, r24	; 27
 322:	08 95       	ret
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	59 f4       	brne	.+22     	; 0x33e <DIO_write_pin+0x64>
 328:	28 b3       	in	r18, 0x18	; 24
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_write_pin+0x5a>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_write_pin+0x56>
 338:	82 2b       	or	r24, r18
 33a:	88 bb       	out	0x18, r24	; 24
 33c:	08 95       	ret
 33e:	28 b3       	in	r18, 0x18	; 24
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_write_pin+0x70>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_write_pin+0x6c>
 34e:	80 95       	com	r24
 350:	82 23       	and	r24, r18
 352:	88 bb       	out	0x18, r24	; 24
 354:	08 95       	ret
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_write_pin+0x96>
 35a:	25 b3       	in	r18, 0x15	; 21
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_write_pin+0x8c>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_write_pin+0x88>
 36a:	82 2b       	or	r24, r18
 36c:	85 bb       	out	0x15, r24	; 21
 36e:	08 95       	ret
 370:	25 b3       	in	r18, 0x15	; 21
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_write_pin+0xa2>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_write_pin+0x9e>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	85 bb       	out	0x15, r24	; 21
 386:	08 95       	ret
 388:	41 30       	cpi	r20, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <DIO_write_pin+0xc8>
 38c:	22 b3       	in	r18, 0x12	; 18
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_write_pin+0xbe>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_write_pin+0xba>
 39c:	82 2b       	or	r24, r18
 39e:	82 bb       	out	0x12, r24	; 18
 3a0:	08 95       	ret
 3a2:	22 b3       	in	r18, 0x12	; 18
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_write_pin+0xd4>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_write_pin+0xd0>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	82 bb       	out	0x12, r24	; 18
 3b8:	08 95       	ret

000003ba <DIO_read_pin>:
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	e1 54       	subi	r30, 0x41	; 65
 3c0:	f1 09       	sbc	r31, r1
 3c2:	e4 32       	cpi	r30, 0x24	; 36
 3c4:	f1 05       	cpc	r31, r1
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <DIO_read_pin+0x10>
 3c8:	54 c0       	rjmp	.+168    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3ca:	ee 58       	subi	r30, 0x8E	; 142
 3cc:	ff 4f       	sbci	r31, 0xFF	; 255
 3ce:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__tablejump2__>
 3d2:	49 b3       	in	r20, 0x19	; 25
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	9c 01       	movw	r18, r24
 3da:	06 2e       	mov	r0, r22
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_read_pin+0x28>
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_read_pin+0x24>
 3e6:	84 2f       	mov	r24, r20
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	82 23       	and	r24, r18
 3ec:	93 23       	and	r25, r19
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_read_pin+0x3a>
 3f0:	95 95       	asr	r25
 3f2:	87 95       	ror	r24
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_read_pin+0x36>
 3f8:	08 95       	ret
 3fa:	46 b3       	in	r20, 0x16	; 22
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	9c 01       	movw	r18, r24
 402:	06 2e       	mov	r0, r22
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	84 2f       	mov	r24, r20
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	82 23       	and	r24, r18
 414:	93 23       	and	r25, r19
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	95 95       	asr	r25
 41a:	87 95       	ror	r24
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	08 95       	ret
 422:	43 b3       	in	r20, 0x13	; 19
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	9c 01       	movw	r18, r24
 42a:	06 2e       	mov	r0, r22
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	84 2f       	mov	r24, r20
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	82 23       	and	r24, r18
 43c:	93 23       	and	r25, r19
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	95 95       	asr	r25
 442:	87 95       	ror	r24
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	08 95       	ret
 44a:	40 b3       	in	r20, 0x10	; 16
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	9c 01       	movw	r18, r24
 452:	06 2e       	mov	r0, r22
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	84 2f       	mov	r24, r20
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	82 23       	and	r24, r18
 464:	93 23       	and	r25, r19
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	08 95       	ret
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 95       	ret

00000476 <DIO_connect_pull_up>:
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	fc 01       	movw	r30, r24
 47a:	e1 54       	subi	r30, 0x41	; 65
 47c:	f1 09       	sbc	r31, r1
 47e:	e4 32       	cpi	r30, 0x24	; 36
 480:	f1 05       	cpc	r31, r1
 482:	08 f0       	brcs	.+2      	; 0x486 <DIO_connect_pull_up+0x10>
 484:	67 c0       	rjmp	.+206    	; 0x554 <DIO_connect_pull_up+0xde>
 486:	ea 56       	subi	r30, 0x6A	; 106
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__tablejump2__>
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	59 f4       	brne	.+22     	; 0x4a8 <DIO_connect_pull_up+0x32>
 492:	2b b3       	in	r18, 0x1b	; 27
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_connect_pull_up+0x28>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_connect_pull_up+0x24>
 4a2:	82 2b       	or	r24, r18
 4a4:	8b bb       	out	0x1b, r24	; 27
 4a6:	08 95       	ret
 4a8:	2b b3       	in	r18, 0x1b	; 27
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_connect_pull_up+0x3e>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_connect_pull_up+0x3a>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	08 95       	ret
 4c0:	41 30       	cpi	r20, 0x01	; 1
 4c2:	59 f4       	brne	.+22     	; 0x4da <DIO_connect_pull_up+0x64>
 4c4:	28 b3       	in	r18, 0x18	; 24
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_connect_pull_up+0x5a>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_connect_pull_up+0x56>
 4d4:	82 2b       	or	r24, r18
 4d6:	88 bb       	out	0x18, r24	; 24
 4d8:	08 95       	ret
 4da:	28 b3       	in	r18, 0x18	; 24
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_connect_pull_up+0x70>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_connect_pull_up+0x6c>
 4ea:	80 95       	com	r24
 4ec:	82 23       	and	r24, r18
 4ee:	88 bb       	out	0x18, r24	; 24
 4f0:	08 95       	ret
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	59 f4       	brne	.+22     	; 0x50c <DIO_connect_pull_up+0x96>
 4f6:	25 b3       	in	r18, 0x15	; 21
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_connect_pull_up+0x8c>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_connect_pull_up+0x88>
 506:	82 2b       	or	r24, r18
 508:	85 bb       	out	0x15, r24	; 21
 50a:	08 95       	ret
 50c:	25 b3       	in	r18, 0x15	; 21
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_connect_pull_up+0xa2>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_connect_pull_up+0x9e>
 51c:	80 95       	com	r24
 51e:	82 23       	and	r24, r18
 520:	85 bb       	out	0x15, r24	; 21
 522:	08 95       	ret
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	59 f4       	brne	.+22     	; 0x53e <DIO_connect_pull_up+0xc8>
 528:	22 b3       	in	r18, 0x12	; 18
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_connect_pull_up+0xbe>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_connect_pull_up+0xba>
 538:	82 2b       	or	r24, r18
 53a:	82 bb       	out	0x12, r24	; 18
 53c:	08 95       	ret
 53e:	22 b3       	in	r18, 0x12	; 18
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_connect_pull_up+0xd4>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_connect_pull_up+0xd0>
 54e:	80 95       	com	r24
 550:	82 23       	and	r24, r18
 552:	82 bb       	out	0x12, r24	; 18
 554:	08 95       	ret

00000556 <DIO_write_high_nibble>:
	}
}

void DIO_write_high_nibble(unsigned char port,unsigned char number)
{
	number<<=4;
 556:	62 95       	swap	r22
 558:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	fc 01       	movw	r30, r24
 55e:	e1 54       	subi	r30, 0x41	; 65
 560:	f1 09       	sbc	r31, r1
 562:	e4 32       	cpi	r30, 0x24	; 36
 564:	f1 05       	cpc	r31, r1
 566:	f8 f4       	brcc	.+62     	; 0x5a6 <DIO_write_high_nibble+0x50>
 568:	e6 54       	subi	r30, 0x46	; 70
 56a:	ff 4f       	sbci	r31, 0xFF	; 255
 56c:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA&=0x0F;
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	8f 70       	andi	r24, 0x0F	; 15
 574:	8b bb       	out	0x1b, r24	; 27
		PORTA|=number;
 576:	8b b3       	in	r24, 0x1b	; 27
 578:	68 2b       	or	r22, r24
 57a:	6b bb       	out	0x1b, r22	; 27
		break;
 57c:	08 95       	ret
		case 'B':
		case 'b':
		PORTB&=0x0F;
 57e:	88 b3       	in	r24, 0x18	; 24
 580:	8f 70       	andi	r24, 0x0F	; 15
 582:	88 bb       	out	0x18, r24	; 24
		PORTB|=number;
 584:	88 b3       	in	r24, 0x18	; 24
 586:	68 2b       	or	r22, r24
 588:	68 bb       	out	0x18, r22	; 24
		break;
 58a:	08 95       	ret
		case 'C':
		case 'c':
		PORTC&=0x0F;
 58c:	85 b3       	in	r24, 0x15	; 21
 58e:	8f 70       	andi	r24, 0x0F	; 15
 590:	85 bb       	out	0x15, r24	; 21
		PORTC|=number;
 592:	85 b3       	in	r24, 0x15	; 21
 594:	68 2b       	or	r22, r24
 596:	65 bb       	out	0x15, r22	; 21
		break;
 598:	08 95       	ret
		case 'D':
		case 'd':
		PORTD&=0x0F;
 59a:	82 b3       	in	r24, 0x12	; 18
 59c:	8f 70       	andi	r24, 0x0F	; 15
 59e:	82 bb       	out	0x12, r24	; 18
		PORTD|=number;
 5a0:	82 b3       	in	r24, 0x12	; 18
 5a2:	68 2b       	or	r22, r24
 5a4:	62 bb       	out	0x12, r22	; 18
 5a6:	08 95       	ret

000005a8 <KEYBAD_init>:
#include "KEYBAD.h"


void KEYBAD_init(void)
{
	DIO_set_pin_dir(PORT_11,0,1);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	83 e4       	ldi	r24, 0x43	; 67
 5ae:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_11,1,1);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	83 e4       	ldi	r24, 0x43	; 67
 5b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_11,2,1);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	62 e0       	ldi	r22, 0x02	; 2
 5c0:	83 e4       	ldi	r24, 0x43	; 67
 5c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_11,3,1);
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	83 e4       	ldi	r24, 0x43	; 67
 5cc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_22,4,0);
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	83 e4       	ldi	r24, 0x43	; 67
 5d6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_22,5,0);
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	65 e0       	ldi	r22, 0x05	; 5
 5de:	83 e4       	ldi	r24, 0x43	; 67
 5e0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_22,6,0);
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	66 e0       	ldi	r22, 0x06	; 6
 5e8:	83 e4       	ldi	r24, 0x43	; 67
 5ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_22,7,0);
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	67 e0       	ldi	r22, 0x07	; 7
 5f2:	83 e4       	ldi	r24, 0x43	; 67
 5f4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_connect_pull_up(PORT_22,4,1);
 5f8:	41 e0       	ldi	r20, 0x01	; 1
 5fa:	64 e0       	ldi	r22, 0x04	; 4
 5fc:	83 e4       	ldi	r24, 0x43	; 67
 5fe:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_connect_pull_up>
	DIO_connect_pull_up(PORT_22,5,1);
 602:	41 e0       	ldi	r20, 0x01	; 1
 604:	65 e0       	ldi	r22, 0x05	; 5
 606:	83 e4       	ldi	r24, 0x43	; 67
 608:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_connect_pull_up>
	DIO_connect_pull_up(PORT_22,6,1);
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	66 e0       	ldi	r22, 0x06	; 6
 610:	83 e4       	ldi	r24, 0x43	; 67
 612:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_connect_pull_up>
	DIO_connect_pull_up(PORT_22,7,1);
 616:	41 e0       	ldi	r20, 0x01	; 1
 618:	67 e0       	ldi	r22, 0x07	; 7
 61a:	83 e4       	ldi	r24, 0x43	; 67
 61c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_connect_pull_up>
 620:	08 95       	ret

00000622 <KEYBAD_check_press>:
}

char KEYBAD_check_press(void)
{
 622:	ef 92       	push	r14
 624:	ff 92       	push	r15
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	60 97       	sbiw	r28, 0x10	; 16
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	de bf       	out	0x3e, r29	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	cd bf       	out	0x3d, r28	; 61
	char arr_out_val[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 63e:	80 e1       	ldi	r24, 0x10	; 16
 640:	e0 e6       	ldi	r30, 0x60	; 96
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	de 01       	movw	r26, r28
 646:	11 96       	adiw	r26, 0x01	; 1
 648:	01 90       	ld	r0, Z+
 64a:	0d 92       	st	X+, r0
 64c:	8a 95       	dec	r24
 64e:	e1 f7       	brne	.-8      	; 0x648 <KEYBAD_check_press+0x26>
	char ret_val=0xff,value;
	char row,coloum;
	for(row=0;row<4;row++)
 650:	f1 2c       	mov	r15, r1
}

char KEYBAD_check_press(void)
{
	char arr_out_val[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char ret_val=0xff,value;
 652:	ee 24       	eor	r14, r14
 654:	ea 94       	dec	r14
	char row,coloum;
	for(row=0;row<4;row++)
 656:	39 c0       	rjmp	.+114    	; 0x6ca <KEYBAD_check_press+0xa8>
	{
		DIO_write_pin(PORT_11,0,1);
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	83 e4       	ldi	r24, 0x43	; 67
 65e:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
		DIO_write_pin(PORT_11,1,1);
 662:	41 e0       	ldi	r20, 0x01	; 1
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	83 e4       	ldi	r24, 0x43	; 67
 668:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
		DIO_write_pin(PORT_11,2,1);
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	62 e0       	ldi	r22, 0x02	; 2
 670:	83 e4       	ldi	r24, 0x43	; 67
 672:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
		DIO_write_pin(PORT_11,3,1);
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	63 e0       	ldi	r22, 0x03	; 3
 67a:	83 e4       	ldi	r24, 0x43	; 67
 67c:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
		DIO_write_pin(PORT_11,row,0);
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	6f 2d       	mov	r22, r15
 684:	83 e4       	ldi	r24, 0x43	; 67
 686:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
		for (coloum=0;coloum<4;coloum++)
 68a:	10 e0       	ldi	r17, 0x00	; 0
 68c:	19 c0       	rjmp	.+50     	; 0x6c0 <KEYBAD_check_press+0x9e>
		{
			value=DIO_read_pin(PORT_22,(coloum+4));
 68e:	64 e0       	ldi	r22, 0x04	; 4
 690:	61 0f       	add	r22, r17
 692:	83 e4       	ldi	r24, 0x43	; 67
 694:	0e 94 dd 01 	call	0x3ba	; 0x3ba <DIO_read_pin>
 698:	08 2f       	mov	r16, r24
			if(0==value)
 69a:	81 11       	cpse	r24, r1
 69c:	10 c0       	rjmp	.+32     	; 0x6be <KEYBAD_check_press+0x9c>
			{
				ret_val=arr_out_val[row][coloum];
 69e:	ef 2d       	mov	r30, r15
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	8c 0f       	add	r24, r28
 6b0:	9d 1f       	adc	r25, r29
 6b2:	e8 0f       	add	r30, r24
 6b4:	f9 1f       	adc	r31, r25
 6b6:	e1 0f       	add	r30, r17
 6b8:	f1 1d       	adc	r31, r1
 6ba:	e0 80       	ld	r14, Z
				break;
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <KEYBAD_check_press+0xa2>
		DIO_write_pin(PORT_11,0,1);
		DIO_write_pin(PORT_11,1,1);
		DIO_write_pin(PORT_11,2,1);
		DIO_write_pin(PORT_11,3,1);
		DIO_write_pin(PORT_11,row,0);
		for (coloum=0;coloum<4;coloum++)
 6be:	1f 5f       	subi	r17, 0xFF	; 255
 6c0:	14 30       	cpi	r17, 0x04	; 4
 6c2:	28 f3       	brcs	.-54     	; 0x68e <KEYBAD_check_press+0x6c>
			{
				ret_val=arr_out_val[row][coloum];
				break;
			}
		}
		if (0==value)
 6c4:	00 23       	and	r16, r16
 6c6:	21 f0       	breq	.+8      	; 0x6d0 <KEYBAD_check_press+0xae>
char KEYBAD_check_press(void)
{
	char arr_out_val[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char ret_val=0xff,value;
	char row,coloum;
	for(row=0;row<4;row++)
 6c8:	f3 94       	inc	r15
 6ca:	93 e0       	ldi	r25, 0x03	; 3
 6cc:	9f 15       	cp	r25, r15
 6ce:	20 f6       	brcc	.-120    	; 0x658 <KEYBAD_check_press+0x36>
		{
			break;
		}
	}
	return ret_val;
 6d0:	8e 2d       	mov	r24, r14
 6d2:	60 96       	adiw	r28, 0x10	; 16
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	08 95       	ret

000006ec <enable>:
	#endif
}

static void enable(void)
{
	DIO_write_pin(PORT_2,EN,1);
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	62 e0       	ldi	r22, 0x02	; 2
 6f0:	82 e4       	ldi	r24, 0x42	; 66
 6f2:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f6:	8f e9       	ldi	r24, 0x9F	; 159
 6f8:	9f e0       	ldi	r25, 0x0F	; 15
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <enable+0xe>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <enable+0x14>
 700:	00 00       	nop
	_delay_ms(2);
	DIO_write_pin(PORT_2,EN,0);
 702:	40 e0       	ldi	r20, 0x00	; 0
 704:	62 e0       	ldi	r22, 0x02	; 2
 706:	82 e4       	ldi	r24, 0x42	; 66
 708:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
 70c:	8f e9       	ldi	r24, 0x9F	; 159
 70e:	9f e0       	ldi	r25, 0x0F	; 15
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <enable+0x24>
 714:	00 c0       	rjmp	.+0      	; 0x716 <enable+0x2a>
 716:	00 00       	nop
 718:	08 95       	ret

0000071a <LCD_send_cmd>:
	_delay_ms(2);
}

void LCD_send_cmd(char cmd)
{
 71a:	cf 93       	push	r28
 71c:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,0);
 71e:	40 e0       	ldi	r20, 0x00	; 0
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	82 e4       	ldi	r24, 0x42	; 66
 724:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,cmd);
	enable();
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,cmd>>4);
 728:	6c 2f       	mov	r22, r28
 72a:	62 95       	swap	r22
 72c:	6f 70       	andi	r22, 0x0F	; 15
 72e:	81 e4       	ldi	r24, 0x41	; 65
 730:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_write_high_nibble>
	enable();
 734:	0e 94 76 03 	call	0x6ec	; 0x6ec <enable>
	DIO_write_high_nibble(PORT_1,cmd);
 738:	6c 2f       	mov	r22, r28
 73a:	81 e4       	ldi	r24, 0x41	; 65
 73c:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_write_high_nibble>
	enable();
 740:	0e 94 76 03 	call	0x6ec	; 0x6ec <enable>
 744:	8f ec       	ldi	r24, 0xCF	; 207
 746:	97 e0       	ldi	r25, 0x07	; 7
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <LCD_send_cmd+0x2e>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <LCD_send_cmd+0x34>
 74e:	00 00       	nop
	#endif
	_delay_ms(1);
}
 750:	cf 91       	pop	r28
 752:	08 95       	ret

00000754 <LCD_init>:
 754:	2f ef       	ldi	r18, 0xFF	; 255
 756:	81 ee       	ldi	r24, 0xE1	; 225
 758:	94 e0       	ldi	r25, 0x04	; 4
 75a:	21 50       	subi	r18, 0x01	; 1
 75c:	80 40       	sbci	r24, 0x00	; 0
 75e:	90 40       	sbci	r25, 0x00	; 0
 760:	e1 f7       	brne	.-8      	; 0x75a <LCD_init+0x6>
 762:	00 c0       	rjmp	.+0      	; 0x764 <LCD_init+0x10>
 764:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
	_delay_ms(1);
	
	#elif defined four_bits_mode
	DIO_set_pin_dir(PORT_1,4,1);
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	64 e0       	ldi	r22, 0x04	; 4
 76a:	81 e4       	ldi	r24, 0x41	; 65
 76c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,5,1);
 770:	41 e0       	ldi	r20, 0x01	; 1
 772:	65 e0       	ldi	r22, 0x05	; 5
 774:	81 e4       	ldi	r24, 0x41	; 65
 776:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,6,1);
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	66 e0       	ldi	r22, 0x06	; 6
 77e:	81 e4       	ldi	r24, 0x41	; 65
 780:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,7,1);
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	67 e0       	ldi	r22, 0x07	; 7
 788:	81 e4       	ldi	r24, 0x41	; 65
 78a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,EN,1);
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	62 e0       	ldi	r22, 0x02	; 2
 792:	82 e4       	ldi	r24, 0x42	; 66
 794:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RW,1);
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	61 e0       	ldi	r22, 0x01	; 1
 79c:	82 e4       	ldi	r24, 0x42	; 66
 79e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RS,1);
 7a2:	41 e0       	ldi	r20, 0x01	; 1
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	82 e4       	ldi	r24, 0x42	; 66
 7a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_dir>
	DIO_write_pin(PORT_2,RW,0);	
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	82 e4       	ldi	r24, 0x42	; 66
 7b2:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
	
	LCD_send_cmd(RETURN_HOME); //4_bits_mode //return home
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_send_cmd>
 7bc:	8f e1       	ldi	r24, 0x1F	; 31
 7be:	9e e4       	ldi	r25, 0x4E	; 78
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <LCD_init+0x6c>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <LCD_init+0x72>
 7c6:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BITS);  //4_bits_mode
 7c8:	88 e2       	ldi	r24, 0x28	; 40
 7ca:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_send_cmd>
 7ce:	8f ec       	ldi	r24, 0xCF	; 207
 7d0:	97 e0       	ldi	r25, 0x07	; 7
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <LCD_init+0x7e>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <LCD_init+0x84>
 7d8:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);  //clear screen
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_send_cmd>
 7e0:	8f e1       	ldi	r24, 0x1F	; 31
 7e2:	9e e4       	ldi	r25, 0x4E	; 78
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	f1 f7       	brne	.-4      	; 0x7e4 <LCD_init+0x90>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <LCD_init+0x96>
 7ea:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(CURSOR_Off_DISPLAY_ON); //curson on, display on
 7ec:	8c e0       	ldi	r24, 0x0C	; 12
 7ee:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_send_cmd>
 7f2:	8f ec       	ldi	r24, 0xCF	; 207
 7f4:	97 e0       	ldi	r25, 0x07	; 7
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <LCD_init+0xa2>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <LCD_init+0xa8>
 7fc:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
 7fe:	86 e0       	ldi	r24, 0x06	; 6
 800:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_send_cmd>
 804:	8f ec       	ldi	r24, 0xCF	; 207
 806:	97 e0       	ldi	r25, 0x07	; 7
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80e:	00 00       	nop
 810:	08 95       	ret

00000812 <LCD_send_data>:
	#endif
	_delay_ms(1);
}

void LCD_send_data(char data)
{
 812:	cf 93       	push	r28
 814:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,1);
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	82 e4       	ldi	r24, 0x42	; 66
 81c:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,data);
	enable();
	
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,data>>4);
 820:	6c 2f       	mov	r22, r28
 822:	62 95       	swap	r22
 824:	6f 70       	andi	r22, 0x0F	; 15
 826:	81 e4       	ldi	r24, 0x41	; 65
 828:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_write_high_nibble>
	enable();
 82c:	0e 94 76 03 	call	0x6ec	; 0x6ec <enable>
	DIO_write_high_nibble(PORT_1,data);
 830:	6c 2f       	mov	r22, r28
 832:	81 e4       	ldi	r24, 0x41	; 65
 834:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_write_high_nibble>
	enable();
 838:	0e 94 76 03 	call	0x6ec	; 0x6ec <enable>
	#endif
	
}
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <LCD_send_string>:

void LCD_send_string(char* string)
{
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	ec 01       	movw	r28, r24
	while((*string!='\0'))
 846:	03 c0       	rjmp	.+6      	; 0x84e <LCD_send_string+0xe>
	{
		LCD_send_data(*string);
 848:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_data>
		string++;
 84c:	21 96       	adiw	r28, 0x01	; 1
	
}

void LCD_send_string(char* string)
{
	while((*string!='\0'))
 84e:	88 81       	ld	r24, Y
 850:	81 11       	cpse	r24, r1
 852:	fa cf       	rjmp	.-12     	; 0x848 <LCD_send_string+0x8>
	{
		LCD_send_data(*string);
		string++;
	}
}
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	08 95       	ret

0000085a <LCD_clr_screen>:

void LCD_clr_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_send_cmd>
 860:	8f e1       	ldi	r24, 0x1F	; 31
 862:	9e e4       	ldi	r25, 0x4E	; 78
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
 868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
 86a:	00 00       	nop
 86c:	08 95       	ret

0000086e <LCD_move_cursor>:
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
 86e:	9f ef       	ldi	r25, 0xFF	; 255
 870:	98 0f       	add	r25, r24
 872:	92 30       	cpi	r25, 0x02	; 2
 874:	70 f4       	brcc	.+28     	; 0x892 <LCD_move_cursor+0x24>
 876:	61 31       	cpi	r22, 0x11	; 17
 878:	70 f4       	brcc	.+28     	; 0x896 <LCD_move_cursor+0x28>
 87a:	66 23       	and	r22, r22
 87c:	71 f0       	breq	.+28     	; 0x89a <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if (row==1)
 87e:	81 30       	cpi	r24, 0x01	; 1
 880:	19 f4       	brne	.+6      	; 0x888 <LCD_move_cursor+0x1a>
	{
		data=(0x80+coloum-1);
 882:	8f e7       	ldi	r24, 0x7F	; 127
 884:	86 0f       	add	r24, r22
 886:	0c c0       	rjmp	.+24     	; 0x8a0 <LCD_move_cursor+0x32>
	}
	else if (row==2)
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	49 f4       	brne	.+18     	; 0x89e <LCD_move_cursor+0x30>
	{
		data=(0xC0+coloum-1);
 88c:	8f eb       	ldi	r24, 0xBF	; 191
 88e:	86 0f       	add	r24, r22
 890:	07 c0       	rjmp	.+14     	; 0x8a0 <LCD_move_cursor+0x32>
void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
	{
		data=0x80;
 892:	80 e8       	ldi	r24, 0x80	; 128
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <LCD_move_cursor+0x32>
 896:	80 e8       	ldi	r24, 0x80	; 128
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <LCD_move_cursor+0x32>
 89a:	80 e8       	ldi	r24, 0x80	; 128
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <LCD_move_cursor+0x32>
	_delay_ms(10);
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
 89e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data=(0xC0+coloum-1);
	}
	LCD_send_cmd(data);
 8a0:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_send_cmd>
 8a4:	8f ec       	ldi	r24, 0xCF	; 207
 8a6:	97 e0       	ldi	r25, 0x07	; 7
 8a8:	01 97       	sbiw	r24, 0x01	; 1
 8aa:	f1 f7       	brne	.-4      	; 0x8a8 <LCD_move_cursor+0x3a>
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <LCD_move_cursor+0x40>
 8ae:	00 00       	nop
 8b0:	08 95       	ret

000008b2 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

volatile int flag1,flag2;
int main(void)
{
 8b2:	ef 92       	push	r14
 8b4:	ff 92       	push	r15
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	2c 97       	sbiw	r28, 0x0c	; 12
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 8cc:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_init>
	KEYBAD_init();
 8d0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <KEYBAD_init>
	TIMER0_CTC_init_with_interrupt();
 8d4:	0e 94 c3 06 	call	0xd86	; 0xd86 <TIMER0_CTC_init_with_interrupt>
	char num2_str[4];
	char num3_str[4];
	
	while(1)
	{
		flag2=0;
 8d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 8dc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		flag1=0;
 8e0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag1+0x1>
 8e4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag1>
		LCD_clr_screen();
 8e8:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
		LCD_send_string("8+?? =13");
 8ec:	80 e7       	ldi	r24, 0x70	; 112
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
	LCD_init();
	KEYBAD_init();
	TIMER0_CTC_init_with_interrupt();
	char ret_key;
	int num1,num2,num3;
	int count1=0,count2=0,count3=0;
 8f4:	e1 2c       	mov	r14, r1
 8f6:	f1 2c       	mov	r15, r1
		flag1=0;
		LCD_clr_screen();
		LCD_send_string("8+?? =13");
		do
		{
			ret_key=KEYBAD_check_press();
 8f8:	0e 94 11 03 	call	0x622	; 0x622 <KEYBAD_check_press>
 8fc:	18 2f       	mov	r17, r24
			if ('='==ret_key || '0'==ret_key || '1'==ret_key|| '2'==ret_key || '3'==ret_key || '4'==ret_key || '5'==ret_key || '6'==ret_key || '7'==ret_key || '8'==ret_key || '9'==ret_key)
 8fe:	8d 33       	cpi	r24, 0x3D	; 61
 900:	a1 f0       	breq	.+40     	; 0x92a <main+0x78>
 902:	80 33       	cpi	r24, 0x30	; 48
 904:	91 f0       	breq	.+36     	; 0x92a <main+0x78>
 906:	81 33       	cpi	r24, 0x31	; 49
 908:	81 f0       	breq	.+32     	; 0x92a <main+0x78>
 90a:	82 33       	cpi	r24, 0x32	; 50
 90c:	71 f0       	breq	.+28     	; 0x92a <main+0x78>
 90e:	83 33       	cpi	r24, 0x33	; 51
 910:	61 f0       	breq	.+24     	; 0x92a <main+0x78>
 912:	84 33       	cpi	r24, 0x34	; 52
 914:	51 f0       	breq	.+20     	; 0x92a <main+0x78>
 916:	85 33       	cpi	r24, 0x35	; 53
 918:	41 f0       	breq	.+16     	; 0x92a <main+0x78>
 91a:	86 33       	cpi	r24, 0x36	; 54
 91c:	31 f0       	breq	.+12     	; 0x92a <main+0x78>
 91e:	87 33       	cpi	r24, 0x37	; 55
 920:	21 f0       	breq	.+8      	; 0x92a <main+0x78>
 922:	88 33       	cpi	r24, 0x38	; 56
 924:	11 f0       	breq	.+4      	; 0x92a <main+0x78>
 926:	89 33       	cpi	r24, 0x39	; 57
 928:	39 f5       	brne	.+78     	; 0x978 <main+0xc6>
			{
				if ('='==ret_key)
 92a:	1d 33       	cpi	r17, 0x3D	; 61
 92c:	c9 f1       	breq	.+114    	; 0x9a0 <main+0xee>
				{
					break;
				}
				else
				{
					if (0==count1)
 92e:	e1 14       	cp	r14, r1
 930:	f1 04       	cpc	r15, r1
 932:	61 f4       	brne	.+24     	; 0x94c <main+0x9a>
					{
						LCD_move_cursor(1,3);
 934:	63 e0       	ldi	r22, 0x03	; 3
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
						LCD_send_string("  ");
 93c:	89 e7       	ldi	r24, 0x79	; 121
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
						LCD_move_cursor(1,3);
 944:	63 e0       	ldi	r22, 0x03	; 3
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
					}
					LCD_send_data(ret_key);
 94c:	81 2f       	mov	r24, r17
 94e:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_data>
					num1_str[count1]=ret_key;
 952:	e1 e0       	ldi	r30, 0x01	; 1
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	ec 0f       	add	r30, r28
 958:	fd 1f       	adc	r31, r29
 95a:	ee 0d       	add	r30, r14
 95c:	ff 1d       	adc	r31, r15
 95e:	10 83       	st	Z, r17
					count1++;
 960:	2f ef       	ldi	r18, 0xFF	; 255
 962:	e2 1a       	sub	r14, r18
 964:	f2 0a       	sbc	r15, r18
 966:	8f e7       	ldi	r24, 0x7F	; 127
 968:	9a e1       	ldi	r25, 0x1A	; 26
 96a:	26 e0       	ldi	r18, 0x06	; 6
 96c:	81 50       	subi	r24, 0x01	; 1
 96e:	90 40       	sbci	r25, 0x00	; 0
 970:	20 40       	sbci	r18, 0x00	; 0
 972:	e1 f7       	brne	.-8      	; 0x96c <main+0xba>
 974:	00 c0       	rjmp	.+0      	; 0x976 <main+0xc4>
 976:	00 00       	nop
					_delay_ms(250);
				}
			}
			if (flag1>=1000)
 978:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 97c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <flag1+0x1>
 980:	88 3e       	cpi	r24, 0xE8	; 232
 982:	93 40       	sbci	r25, 0x03	; 3
 984:	34 f0       	brlt	.+12     	; 0x992 <main+0xe0>
			{
				flag2=1;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 98e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			}
		} while (0==flag2);
 992:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 996:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 99a:	89 2b       	or	r24, r25
 99c:	09 f4       	brne	.+2      	; 0x9a0 <main+0xee>
 99e:	ac cf       	rjmp	.-168    	; 0x8f8 <main+0x46>
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	91 ee       	ldi	r25, 0xE1	; 225
 9a4:	24 e0       	ldi	r18, 0x04	; 4
 9a6:	81 50       	subi	r24, 0x01	; 1
 9a8:	90 40       	sbci	r25, 0x00	; 0
 9aa:	20 40       	sbci	r18, 0x00	; 0
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <main+0xf4>
 9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <main+0xfe>
 9b0:	00 00       	nop
		_delay_ms(200);
		num1_str[count1]='\0';
 9b2:	e1 e0       	ldi	r30, 0x01	; 1
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	ec 0f       	add	r30, r28
 9b8:	fd 1f       	adc	r31, r29
 9ba:	ee 0d       	add	r30, r14
 9bc:	ff 1d       	adc	r31, r15
 9be:	10 82       	st	Z, r1
		num1=atoi(num1_str);
 9c0:	ce 01       	movw	r24, r28
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	0e 94 df 06 	call	0xdbe	; 0xdbe <atoi>
		if (NOT_pressed==ret_key)
 9c8:	1f 3f       	cpi	r17, 0xFF	; 255
 9ca:	79 f4       	brne	.+30     	; 0x9ea <main+0x138>
		{
			LCD_clr_screen();
 9cc:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Time over");
 9d0:	8c e7       	ldi	r24, 0x7C	; 124
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 9d8:	64 e0       	ldi	r22, 0x04	; 4
 9da:	82 e0       	ldi	r24, 0x02	; 2
 9dc:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:0/10");
 9e0:	89 e8       	ldi	r24, 0x89	; 137
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			break;
 9e8:	a9 c1       	rjmp	.+850    	; 0xd3c <main+0x48a>
		}
		else if (5==num1)
 9ea:	05 97       	sbiw	r24, 0x05	; 5
 9ec:	99 f5       	brne	.+102    	; 0xa54 <main+0x1a2>
		{
			LCD_clr_screen();
 9ee:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Well Done");
 9f2:	84 e9       	ldi	r24, 0x94	; 148
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 9fa:	64 e0       	ldi	r22, 0x04	; 4
 9fc:	82 e0       	ldi	r24, 0x02	; 2
 9fe:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:2/10");
 a02:	81 ea       	ldi	r24, 0xA1	; 161
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
 a0a:	8f ef       	ldi	r24, 0xFF	; 255
 a0c:	99 e6       	ldi	r25, 0x69	; 105
 a0e:	28 e1       	ldi	r18, 0x18	; 24
 a10:	81 50       	subi	r24, 0x01	; 1
 a12:	90 40       	sbci	r25, 0x00	; 0
 a14:	20 40       	sbci	r18, 0x00	; 0
 a16:	e1 f7       	brne	.-8      	; 0xa10 <main+0x15e>
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <main+0x168>
 a1a:	00 00       	nop
			_delay_ms(1000);
			LCD_clr_screen();
 a1c:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Next Level");
 a20:	8c ea       	ldi	r24, 0xAC	; 172
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	99 e6       	ldi	r25, 0x69	; 105
 a2c:	28 e1       	ldi	r18, 0x18	; 24
 a2e:	81 50       	subi	r24, 0x01	; 1
 a30:	90 40       	sbci	r25, 0x00	; 0
 a32:	20 40       	sbci	r18, 0x00	; 0
 a34:	e1 f7       	brne	.-8      	; 0xa2e <main+0x17c>
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <main+0x186>
 a38:	00 00       	nop
			LCD_send_string("   Wrong Answer");
			LCD_move_cursor(2,4);
			LCD_send_string("Score:0/10");
			break;
		}
		LCD_clr_screen();
 a3a:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
		LCD_send_string("68+?? =100");
 a3e:	8a eb       	ldi	r24, 0xBA	; 186
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
		flag1=0;
 a46:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag1+0x1>
 a4a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag1>
	LCD_init();
	KEYBAD_init();
	TIMER0_CTC_init_with_interrupt();
	char ret_key;
	int num1,num2,num3;
	int count1=0,count2=0,count3=0;
 a4e:	e1 2c       	mov	r14, r1
 a50:	f1 2c       	mov	r15, r1
 a52:	0f c0       	rjmp	.+30     	; 0xa72 <main+0x1c0>
			LCD_send_string("   Next Level");
			_delay_ms(1000);
		}
		else
		{
			LCD_clr_screen();
 a54:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Wrong Answer");
 a58:	85 ec       	ldi	r24, 0xC5	; 197
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 a60:	64 e0       	ldi	r22, 0x04	; 4
 a62:	82 e0       	ldi	r24, 0x02	; 2
 a64:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:0/10");
 a68:	89 e8       	ldi	r24, 0x89	; 137
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			break;
 a70:	65 c1       	rjmp	.+714    	; 0xd3c <main+0x48a>
		LCD_clr_screen();
		LCD_send_string("68+?? =100");
		flag1=0;
		do
		{
			ret_key=KEYBAD_check_press();
 a72:	0e 94 11 03 	call	0x622	; 0x622 <KEYBAD_check_press>
 a76:	18 2f       	mov	r17, r24
			if ('='==ret_key || '0'==ret_key || '1'==ret_key|| '2'==ret_key || '3'==ret_key || '4'==ret_key || '5'==ret_key || '6'==ret_key || '7'==ret_key || '8'==ret_key || '9'==ret_key)
 a78:	8d 33       	cpi	r24, 0x3D	; 61
 a7a:	a1 f0       	breq	.+40     	; 0xaa4 <main+0x1f2>
 a7c:	80 33       	cpi	r24, 0x30	; 48
 a7e:	91 f0       	breq	.+36     	; 0xaa4 <main+0x1f2>
 a80:	81 33       	cpi	r24, 0x31	; 49
 a82:	81 f0       	breq	.+32     	; 0xaa4 <main+0x1f2>
 a84:	82 33       	cpi	r24, 0x32	; 50
 a86:	71 f0       	breq	.+28     	; 0xaa4 <main+0x1f2>
 a88:	83 33       	cpi	r24, 0x33	; 51
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <main+0x1f2>
 a8c:	84 33       	cpi	r24, 0x34	; 52
 a8e:	51 f0       	breq	.+20     	; 0xaa4 <main+0x1f2>
 a90:	85 33       	cpi	r24, 0x35	; 53
 a92:	41 f0       	breq	.+16     	; 0xaa4 <main+0x1f2>
 a94:	86 33       	cpi	r24, 0x36	; 54
 a96:	31 f0       	breq	.+12     	; 0xaa4 <main+0x1f2>
 a98:	87 33       	cpi	r24, 0x37	; 55
 a9a:	21 f0       	breq	.+8      	; 0xaa4 <main+0x1f2>
 a9c:	88 33       	cpi	r24, 0x38	; 56
 a9e:	11 f0       	breq	.+4      	; 0xaa4 <main+0x1f2>
 aa0:	89 33       	cpi	r24, 0x39	; 57
 aa2:	39 f5       	brne	.+78     	; 0xaf2 <main+0x240>
			{
				if ('='==ret_key)
 aa4:	1d 33       	cpi	r17, 0x3D	; 61
 aa6:	c9 f1       	breq	.+114    	; 0xb1a <main+0x268>
				{
					break;
				}
				else
				{
					if (0==count2)
 aa8:	e1 14       	cp	r14, r1
 aaa:	f1 04       	cpc	r15, r1
 aac:	61 f4       	brne	.+24     	; 0xac6 <main+0x214>
					{
						LCD_move_cursor(1,4);
 aae:	64 e0       	ldi	r22, 0x04	; 4
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
						LCD_send_string("  ");
 ab6:	89 e7       	ldi	r24, 0x79	; 121
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
						LCD_move_cursor(1,4);
 abe:	64 e0       	ldi	r22, 0x04	; 4
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
					}
					LCD_send_data(ret_key);
 ac6:	81 2f       	mov	r24, r17
 ac8:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_data>
					num2_str[count2]=ret_key;
 acc:	e5 e0       	ldi	r30, 0x05	; 5
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	ec 0f       	add	r30, r28
 ad2:	fd 1f       	adc	r31, r29
 ad4:	ee 0d       	add	r30, r14
 ad6:	ff 1d       	adc	r31, r15
 ad8:	10 83       	st	Z, r17
					count2++;
 ada:	8f ef       	ldi	r24, 0xFF	; 255
 adc:	e8 1a       	sub	r14, r24
 ade:	f8 0a       	sbc	r15, r24
 ae0:	9f e7       	ldi	r25, 0x7F	; 127
 ae2:	2a e1       	ldi	r18, 0x1A	; 26
 ae4:	86 e0       	ldi	r24, 0x06	; 6
 ae6:	91 50       	subi	r25, 0x01	; 1
 ae8:	20 40       	sbci	r18, 0x00	; 0
 aea:	80 40       	sbci	r24, 0x00	; 0
 aec:	e1 f7       	brne	.-8      	; 0xae6 <main+0x234>
 aee:	00 c0       	rjmp	.+0      	; 0xaf0 <main+0x23e>
 af0:	00 00       	nop
					_delay_ms(250);
				}
			}
			if (flag1>=1000)
 af2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 af6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <flag1+0x1>
 afa:	88 3e       	cpi	r24, 0xE8	; 232
 afc:	93 40       	sbci	r25, 0x03	; 3
 afe:	34 f0       	brlt	.+12     	; 0xb0c <main+0x25a>
			{
				flag2=1;
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 b08:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			}
		} while (0==flag2);
 b0c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 b10:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 b14:	89 2b       	or	r24, r25
 b16:	09 f4       	brne	.+2      	; 0xb1a <main+0x268>
 b18:	ac cf       	rjmp	.-168    	; 0xa72 <main+0x1c0>
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	91 ee       	ldi	r25, 0xE1	; 225
 b1e:	24 e0       	ldi	r18, 0x04	; 4
 b20:	81 50       	subi	r24, 0x01	; 1
 b22:	90 40       	sbci	r25, 0x00	; 0
 b24:	20 40       	sbci	r18, 0x00	; 0
 b26:	e1 f7       	brne	.-8      	; 0xb20 <main+0x26e>
 b28:	00 c0       	rjmp	.+0      	; 0xb2a <main+0x278>
 b2a:	00 00       	nop
		_delay_ms(200);
		num2_str[count2]='\0';
 b2c:	e5 e0       	ldi	r30, 0x05	; 5
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	ec 0f       	add	r30, r28
 b32:	fd 1f       	adc	r31, r29
 b34:	ee 0d       	add	r30, r14
 b36:	ff 1d       	adc	r31, r15
 b38:	10 82       	st	Z, r1
		num2=atoi(num2_str);
 b3a:	ce 01       	movw	r24, r28
 b3c:	05 96       	adiw	r24, 0x05	; 5
 b3e:	0e 94 df 06 	call	0xdbe	; 0xdbe <atoi>
		if (NOT_pressed==ret_key)
 b42:	1f 3f       	cpi	r17, 0xFF	; 255
 b44:	79 f4       	brne	.+30     	; 0xb64 <main+0x2b2>
		{
			LCD_clr_screen();
 b46:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Time over");
 b4a:	8c e7       	ldi	r24, 0x7C	; 124
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 b52:	64 e0       	ldi	r22, 0x04	; 4
 b54:	82 e0       	ldi	r24, 0x02	; 2
 b56:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:2/10");
 b5a:	81 ea       	ldi	r24, 0xA1	; 161
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			break;
 b62:	ec c0       	rjmp	.+472    	; 0xd3c <main+0x48a>
		}
		else if (32==num2)
 b64:	80 97       	sbiw	r24, 0x20	; 32
 b66:	99 f5       	brne	.+102    	; 0xbce <main+0x31c>
		{
			LCD_clr_screen();
 b68:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Well Done");
 b6c:	84 e9       	ldi	r24, 0x94	; 148
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 b74:	64 e0       	ldi	r22, 0x04	; 4
 b76:	82 e0       	ldi	r24, 0x02	; 2
 b78:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:6/10");
 b7c:	85 ed       	ldi	r24, 0xD5	; 213
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	99 e6       	ldi	r25, 0x69	; 105
 b88:	28 e1       	ldi	r18, 0x18	; 24
 b8a:	81 50       	subi	r24, 0x01	; 1
 b8c:	90 40       	sbci	r25, 0x00	; 0
 b8e:	20 40       	sbci	r18, 0x00	; 0
 b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0x2d8>
 b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0x2e2>
 b94:	00 00       	nop
			_delay_ms(1000);
			LCD_clr_screen();
 b96:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Next Level");
 b9a:	8c ea       	ldi	r24, 0xAC	; 172
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
 ba2:	8f ef       	ldi	r24, 0xFF	; 255
 ba4:	99 e6       	ldi	r25, 0x69	; 105
 ba6:	28 e1       	ldi	r18, 0x18	; 24
 ba8:	81 50       	subi	r24, 0x01	; 1
 baa:	90 40       	sbci	r25, 0x00	; 0
 bac:	20 40       	sbci	r18, 0x00	; 0
 bae:	e1 f7       	brne	.-8      	; 0xba8 <main+0x2f6>
 bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <main+0x300>
 bb2:	00 00       	nop
			LCD_move_cursor(2,4);
			LCD_send_string("Score:2/10");
			break;
			
		}
		LCD_clr_screen();
 bb4:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
		LCD_send_string("150+?? =322");
 bb8:	80 ee       	ldi	r24, 0xE0	; 224
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
		flag1=0;
 bc0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <flag1+0x1>
 bc4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag1>
	LCD_init();
	KEYBAD_init();
	TIMER0_CTC_init_with_interrupt();
	char ret_key;
	int num1,num2,num3;
	int count1=0,count2=0,count3=0;
 bc8:	e1 2c       	mov	r14, r1
 bca:	f1 2c       	mov	r15, r1
 bcc:	0f c0       	rjmp	.+30     	; 0xbec <main+0x33a>
			LCD_send_string("   Next Level");
			_delay_ms(1000);
		}
		else
		{
			LCD_clr_screen();
 bce:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Wrong Answer");
 bd2:	85 ec       	ldi	r24, 0xC5	; 197
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 bda:	64 e0       	ldi	r22, 0x04	; 4
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:2/10");
 be2:	81 ea       	ldi	r24, 0xA1	; 161
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			break;
 bea:	a8 c0       	rjmp	.+336    	; 0xd3c <main+0x48a>
		LCD_clr_screen();
		LCD_send_string("150+?? =322");
		flag1=0;
		do
		{
			ret_key=KEYBAD_check_press();
 bec:	0e 94 11 03 	call	0x622	; 0x622 <KEYBAD_check_press>
 bf0:	18 2f       	mov	r17, r24
			if ('='==ret_key || '0'==ret_key || '1'==ret_key|| '2'==ret_key || '3'==ret_key || '4'==ret_key || '5'==ret_key || '6'==ret_key || '7'==ret_key || '8'==ret_key || '9'==ret_key)
 bf2:	8d 33       	cpi	r24, 0x3D	; 61
 bf4:	a1 f0       	breq	.+40     	; 0xc1e <main+0x36c>
 bf6:	80 33       	cpi	r24, 0x30	; 48
 bf8:	91 f0       	breq	.+36     	; 0xc1e <main+0x36c>
 bfa:	81 33       	cpi	r24, 0x31	; 49
 bfc:	81 f0       	breq	.+32     	; 0xc1e <main+0x36c>
 bfe:	82 33       	cpi	r24, 0x32	; 50
 c00:	71 f0       	breq	.+28     	; 0xc1e <main+0x36c>
 c02:	83 33       	cpi	r24, 0x33	; 51
 c04:	61 f0       	breq	.+24     	; 0xc1e <main+0x36c>
 c06:	84 33       	cpi	r24, 0x34	; 52
 c08:	51 f0       	breq	.+20     	; 0xc1e <main+0x36c>
 c0a:	85 33       	cpi	r24, 0x35	; 53
 c0c:	41 f0       	breq	.+16     	; 0xc1e <main+0x36c>
 c0e:	86 33       	cpi	r24, 0x36	; 54
 c10:	31 f0       	breq	.+12     	; 0xc1e <main+0x36c>
 c12:	87 33       	cpi	r24, 0x37	; 55
 c14:	21 f0       	breq	.+8      	; 0xc1e <main+0x36c>
 c16:	88 33       	cpi	r24, 0x38	; 56
 c18:	11 f0       	breq	.+4      	; 0xc1e <main+0x36c>
 c1a:	89 33       	cpi	r24, 0x39	; 57
 c1c:	39 f5       	brne	.+78     	; 0xc6c <main+0x3ba>
			{
				if ('='==ret_key)
 c1e:	1d 33       	cpi	r17, 0x3D	; 61
 c20:	c9 f1       	breq	.+114    	; 0xc94 <main+0x3e2>
				{
					break;
				}
				else
				{
					if (0==count3)
 c22:	e1 14       	cp	r14, r1
 c24:	f1 04       	cpc	r15, r1
 c26:	61 f4       	brne	.+24     	; 0xc40 <main+0x38e>
					{
						LCD_move_cursor(1,5);
 c28:	65 e0       	ldi	r22, 0x05	; 5
 c2a:	81 e0       	ldi	r24, 0x01	; 1
 c2c:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
						LCD_send_string("  ");
 c30:	89 e7       	ldi	r24, 0x79	; 121
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
						LCD_move_cursor(1,5);
 c38:	65 e0       	ldi	r22, 0x05	; 5
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
					}
					LCD_send_data(ret_key);
 c40:	81 2f       	mov	r24, r17
 c42:	0e 94 09 04 	call	0x812	; 0x812 <LCD_send_data>
					num3_str[count3]=ret_key;
 c46:	e9 e0       	ldi	r30, 0x09	; 9
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	ec 0f       	add	r30, r28
 c4c:	fd 1f       	adc	r31, r29
 c4e:	ee 0d       	add	r30, r14
 c50:	ff 1d       	adc	r31, r15
 c52:	10 83       	st	Z, r17
					count3++;
 c54:	8f ef       	ldi	r24, 0xFF	; 255
 c56:	e8 1a       	sub	r14, r24
 c58:	f8 0a       	sbc	r15, r24
 c5a:	9f e7       	ldi	r25, 0x7F	; 127
 c5c:	2a e1       	ldi	r18, 0x1A	; 26
 c5e:	86 e0       	ldi	r24, 0x06	; 6
 c60:	91 50       	subi	r25, 0x01	; 1
 c62:	20 40       	sbci	r18, 0x00	; 0
 c64:	80 40       	sbci	r24, 0x00	; 0
 c66:	e1 f7       	brne	.-8      	; 0xc60 <main+0x3ae>
 c68:	00 c0       	rjmp	.+0      	; 0xc6a <main+0x3b8>
 c6a:	00 00       	nop
					_delay_ms(250);
				}
			}
			if (flag1>=1000)
 c6c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 c70:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <flag1+0x1>
 c74:	88 3e       	cpi	r24, 0xE8	; 232
 c76:	93 40       	sbci	r25, 0x03	; 3
 c78:	34 f0       	brlt	.+12     	; 0xc86 <main+0x3d4>
			{
				flag2=1;
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 c82:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			}
		} while (0==flag2);
 c86:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 c8a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 c8e:	89 2b       	or	r24, r25
 c90:	09 f4       	brne	.+2      	; 0xc94 <main+0x3e2>
 c92:	ac cf       	rjmp	.-168    	; 0xbec <main+0x33a>
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	91 ee       	ldi	r25, 0xE1	; 225
 c98:	24 e0       	ldi	r18, 0x04	; 4
 c9a:	81 50       	subi	r24, 0x01	; 1
 c9c:	90 40       	sbci	r25, 0x00	; 0
 c9e:	20 40       	sbci	r18, 0x00	; 0
 ca0:	e1 f7       	brne	.-8      	; 0xc9a <main+0x3e8>
 ca2:	00 c0       	rjmp	.+0      	; 0xca4 <main+0x3f2>
 ca4:	00 00       	nop
		_delay_ms(200);
		num3_str[count3]='\0';
 ca6:	e9 e0       	ldi	r30, 0x09	; 9
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	ec 0f       	add	r30, r28
 cac:	fd 1f       	adc	r31, r29
 cae:	ee 0d       	add	r30, r14
 cb0:	ff 1d       	adc	r31, r15
 cb2:	10 82       	st	Z, r1
		num3=atoi(num3_str);
 cb4:	ce 01       	movw	r24, r28
 cb6:	09 96       	adiw	r24, 0x09	; 9
 cb8:	0e 94 df 06 	call	0xdbe	; 0xdbe <atoi>
		if (NOT_pressed==ret_key)
 cbc:	1f 3f       	cpi	r17, 0xFF	; 255
 cbe:	79 f4       	brne	.+30     	; 0xcde <main+0x42c>
		{
			LCD_clr_screen();
 cc0:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Time over");
 cc4:	8c e7       	ldi	r24, 0x7C	; 124
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 ccc:	64 e0       	ldi	r22, 0x04	; 4
 cce:	82 e0       	ldi	r24, 0x02	; 2
 cd0:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:6/10");
 cd4:	85 ed       	ldi	r24, 0xD5	; 213
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			break;
 cdc:	2f c0       	rjmp	.+94     	; 0xd3c <main+0x48a>
		}
		else if (172==num3)
 cde:	8c 3a       	cpi	r24, 0xAC	; 172
 ce0:	91 05       	cpc	r25, r1
 ce2:	f1 f4       	brne	.+60     	; 0xd20 <main+0x46e>
		{
			LCD_clr_screen();
 ce4:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Well Done");
 ce8:	84 e9       	ldi	r24, 0x94	; 148
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 cf0:	64 e0       	ldi	r22, 0x04	; 4
 cf2:	82 e0       	ldi	r24, 0x02	; 2
 cf4:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:10/10");
 cf8:	8c ee       	ldi	r24, 0xEC	; 236
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
 d00:	8f ef       	ldi	r24, 0xFF	; 255
 d02:	99 e6       	ldi	r25, 0x69	; 105
 d04:	28 e1       	ldi	r18, 0x18	; 24
 d06:	81 50       	subi	r24, 0x01	; 1
 d08:	90 40       	sbci	r25, 0x00	; 0
 d0a:	20 40       	sbci	r18, 0x00	; 0
 d0c:	e1 f7       	brne	.-8      	; 0xd06 <main+0x454>
 d0e:	00 c0       	rjmp	.+0      	; 0xd10 <main+0x45e>
 d10:	00 00       	nop
			_delay_ms(1000);
			LCD_clr_screen();
 d12:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string(" Congratulation");
 d16:	88 ef       	ldi	r24, 0xF8	; 248
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			break;
 d1e:	0e c0       	rjmp	.+28     	; 0xd3c <main+0x48a>
			
		}
		else
		{
			LCD_clr_screen();
 d20:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_clr_screen>
			LCD_send_string("   Wrong Answer");
 d24:	85 ec       	ldi	r24, 0xC5	; 197
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			LCD_move_cursor(2,4);
 d2c:	64 e0       	ldi	r22, 0x04	; 4
 d2e:	82 e0       	ldi	r24, 0x02	; 2
 d30:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_move_cursor>
			LCD_send_string("Score:6/10");
 d34:	85 ed       	ldi	r24, 0xD5	; 213
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 20 04 	call	0x840	; 0x840 <LCD_send_string>
			
			goto label;  //write label: in line 30
		}
	} while('A'!=ret_key);
	*/
}
 d3c:	80 e0       	ldi	r24, 0x00	; 0
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	2c 96       	adiw	r28, 0x0c	; 12
 d42:	0f b6       	in	r0, 0x3f	; 63
 d44:	f8 94       	cli
 d46:	de bf       	out	0x3e, r29	; 62
 d48:	0f be       	out	0x3f, r0	; 63
 d4a:	cd bf       	out	0x3d, r28	; 61
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	1f 91       	pop	r17
 d52:	ff 90       	pop	r15
 d54:	ef 90       	pop	r14
 d56:	08 95       	ret

00000d58 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 d58:	1f 92       	push	r1
 d5a:	0f 92       	push	r0
 d5c:	0f b6       	in	r0, 0x3f	; 63
 d5e:	0f 92       	push	r0
 d60:	11 24       	eor	r1, r1
 d62:	8f 93       	push	r24
 d64:	9f 93       	push	r25
	flag1++;
 d66:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag1>
 d6a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <flag1+0x1>
 d6e:	01 96       	adiw	r24, 0x01	; 1
 d70:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <flag1+0x1>
 d74:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag1>
}
 d78:	9f 91       	pop	r25
 d7a:	8f 91       	pop	r24
 d7c:	0f 90       	pop	r0
 d7e:	0f be       	out	0x3f, r0	; 63
 d80:	0f 90       	pop	r0
 d82:	1f 90       	pop	r1
 d84:	18 95       	reti

00000d86 <TIMER0_CTC_init_with_interrupt>:


void TIMER0_CTC_init_with_interrupt(void)
{
	//determine CTC mode
	CLR_BIT(TCCR0,WGM00);
 d86:	83 b7       	in	r24, 0x33	; 51
 d88:	8f 7b       	andi	r24, 0xBF	; 191
 d8a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 d8c:	83 b7       	in	r24, 0x33	; 51
 d8e:	88 60       	ori	r24, 0x08	; 8
 d90:	83 bf       	out	0x33, r24	; 51
	//load value in OCR0 ,to compare match
	OCR0=80;
 d92:	80 e5       	ldi	r24, 0x50	; 80
 d94:	8c bf       	out	0x3c, r24	; 60
	//determine prescaler=1024, timer0_clock=(cpu_clock/prescaler)
	SET_BIT(TCCR0,CS00);
 d96:	83 b7       	in	r24, 0x33	; 51
 d98:	81 60       	ori	r24, 0x01	; 1
 d9a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 d9c:	83 b7       	in	r24, 0x33	; 51
 d9e:	8d 7f       	andi	r24, 0xFD	; 253
 da0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 da2:	83 b7       	in	r24, 0x33	; 51
 da4:	84 60       	ori	r24, 0x04	; 4
 da6:	83 bf       	out	0x33, r24	; 51
	//enable interrupt to compare match
	sei();
 da8:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 daa:	89 b7       	in	r24, 0x39	; 57
 dac:	82 60       	ori	r24, 0x02	; 2
 dae:	89 bf       	out	0x39, r24	; 57
 db0:	08 95       	ret

00000db2 <__tablejump2__>:
 db2:	ee 0f       	add	r30, r30
 db4:	ff 1f       	adc	r31, r31
 db6:	05 90       	lpm	r0, Z+
 db8:	f4 91       	lpm	r31, Z
 dba:	e0 2d       	mov	r30, r0
 dbc:	09 94       	ijmp

00000dbe <atoi>:
 dbe:	fc 01       	movw	r30, r24
 dc0:	88 27       	eor	r24, r24
 dc2:	99 27       	eor	r25, r25
 dc4:	e8 94       	clt
 dc6:	21 91       	ld	r18, Z+
 dc8:	20 32       	cpi	r18, 0x20	; 32
 dca:	e9 f3       	breq	.-6      	; 0xdc6 <atoi+0x8>
 dcc:	29 30       	cpi	r18, 0x09	; 9
 dce:	10 f0       	brcs	.+4      	; 0xdd4 <atoi+0x16>
 dd0:	2e 30       	cpi	r18, 0x0E	; 14
 dd2:	c8 f3       	brcs	.-14     	; 0xdc6 <atoi+0x8>
 dd4:	2b 32       	cpi	r18, 0x2B	; 43
 dd6:	41 f0       	breq	.+16     	; 0xde8 <atoi+0x2a>
 dd8:	2d 32       	cpi	r18, 0x2D	; 45
 dda:	39 f4       	brne	.+14     	; 0xdea <atoi+0x2c>
 ddc:	68 94       	set
 dde:	04 c0       	rjmp	.+8      	; 0xde8 <atoi+0x2a>
 de0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__mulhi_const_10>
 de4:	82 0f       	add	r24, r18
 de6:	91 1d       	adc	r25, r1
 de8:	21 91       	ld	r18, Z+
 dea:	20 53       	subi	r18, 0x30	; 48
 dec:	2a 30       	cpi	r18, 0x0A	; 10
 dee:	c0 f3       	brcs	.-16     	; 0xde0 <atoi+0x22>
 df0:	1e f4       	brtc	.+6      	; 0xdf8 <atoi+0x3a>
 df2:	90 95       	com	r25
 df4:	81 95       	neg	r24
 df6:	9f 4f       	sbci	r25, 0xFF	; 255
 df8:	08 95       	ret

00000dfa <__mulhi_const_10>:
 dfa:	7a e0       	ldi	r23, 0x0A	; 10
 dfc:	97 9f       	mul	r25, r23
 dfe:	90 2d       	mov	r25, r0
 e00:	87 9f       	mul	r24, r23
 e02:	80 2d       	mov	r24, r0
 e04:	91 0d       	add	r25, r1
 e06:	11 24       	eor	r1, r1
 e08:	08 95       	ret

00000e0a <_exit>:
 e0a:	f8 94       	cli

00000e0c <__stop_program>:
 e0c:	ff cf       	rjmp	.-2      	; 0xe0c <__stop_program>
